DONE    

    Support for different client/server implementations

    Client/server implementation built on top of reliable.io and netcode.io

    Packet fragmentation and re-assembly support from reliable.io

    Better implementation of connect tokens via netcode.io

    Port across secure_server to new API.

    Tracked down (rare) message leak in receive queue overflow.

    Extend soak test to have unreliable, unordered channel, and to make sure it exercises packet fragmentation and reassembly codepath.

    Extend yojimbo to have detailed logging support, eg. log levels (none, error, info, debug)

    Fixed compilation on windows.

    Extend yojimbo so it can have an overridden printf function

    Extend netcode.io so it can have an overridden printf function

    Extend reliable.io so it can have an overriden printf function

    Extend yojimbo so it can have an overridden assert function

    Important git submodule tips:

        1. On clone, you must call "git submodule update --recursive" to get the netcode.io and reliable.io submodules. They will initially be empty.

        2. To update the submodules to their respective head revisions: "git submodule update --remote --merge"

        3. Editing the submodules in place doesn't seem to work, unless you created that submodule in your local repository (MacOS in my case).

    Removed secure build, no longer required (unified secure/insecure connect codepaths).

    Extend netcode.io so it can have an overridden assert function

    Extend reliable.io so it can have an overriden assert function

    Update matcher.go so it uses netcode.io golang implementation to generate connect token data

    Fixed bug in reliable.io introduced by renaming 'sequence' to 'ack_sequence' to fix Visual C++ complaining about it.

    Bring across the C++ matcher implementation again, and upgrade it to use the new connect tokens from netcode.io

    Port across secure_client to new API.

    Verified new matcher works with secure client and server.

    Extend netcode.io so the user can set a custom allocator to use for client.

    Extend netcode.io so the user can set a custom allocator to use for server.

    Extend reliable.io so the user can set a custom allocator to use for endpoints.

    Integrate custom allocators for netcode.io and reliable.io with client and server allocators in yojimbo.

    Add reliable.io parameters to client server config.

    Pass over all // todo and fix

TODO

    Consolidate all source code into yojimbo.h and yojimbo.cpp

    Make it easier to integrate the library with projects, eg. just drop in the files.

    Unfortunately, netcode.io and reliable.io also need to be dropped in, but that's fine.

    To get away from this, create lib + DLL, ge. something that would work well with people who want to integrate with Unity, UE4...

    ------------

    Implement packet loss, latency, jitter estimates in reliable.io

    Integrate QoS settings above with yojimbo client/server and connection

    Test these between a real client and server running on my linode

    ------------

    Add ability to back-channel connect client and server (at the base client level).

    This should allow the ability to pump in client -> server packets for a connected slot, and server -> client packets.

    This will enable local loopback packet exchange between a client and server, and should work to a standard interface that is the same across all client/server implementations.

    eg. this should be implemented in the base client / base server.

    ------------

    Convert across to multithreaded DLL by default. Works better with Unreal engine this way.

    ------------

    Explore how I can make it easier to ship libs and DLLs on windows platform without dependencies (eg. prebuilt, so it can be dropped in for say windows platform with UE4)

    ------------

    Pass over doxygen documentation again.

    ------------

    *** Feature complete for 0.6 release ***

    ------------
