
Really going to have to go to town with validation and runtime checks to catch this one I think, if it's a memory trash.

First start by adding a magic value in the base packet (debug build only) which is set only if the object is created through the packet factory. That way if somehow a packet is getting passed into free which has not been created via the packet factory, I will pick it up. Also, bad pointers and so on.

Turned on YOJIMBO_DEBUG_PACKET_LEAKS in yojimbo_config.h

Make it store the type as the hash value too, which could be useful.

Added a new feature, #define YOJIMBO_PACKET_MAGIC 1

Packet magic!!!!!one

Now rolling a random uint64_t in the packet factory, I'll stash this on packets that are created from that factory,
then trivially looking at the packet on destroy, I can complain if it looks like the packet wasn't created by that factory,
eg. if it is 0 then it is a manually created packet, and if it is a different non-zero value, it was created by another factory.

OK. I keep adding stuff and it gets stranger. It's definitely a memory trash. It's quite a random one too because the location of the trash shifts around.

I have a crash in the debugger now that indicates that the last variable in the packet processor m_scratchBuffer was overwritten with 0xCC, that's 204 decimal.

Goddamn it. It's the fucking send queue. That's the root cause of the bullshit packets?

Confirmed. The trash is in the send queue. It's not properly handling wrapping. Confirmed by dropping the send queue array size down, and the crashes occur faster. This is definitely it. Fantastic!

Yes, one single place where the element was being written was not wrapping modulus array size. WTF.

Confirmed fixed.

Now to clean up the mess...










NOTES

    Need to remember to switch the mallocs back to alloca once I'm finished with the memory debug stomp tracking.

    Check over code for todos
