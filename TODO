DONE    

TODO

    Tear down yojimbo so I can rebuild it on top of netcode.io and reliable.io

    What parts definitely go? 

        - Transport classes. 

        - Socket classes etc. 

        - Connection class w. ack system.

        - Packet class. Packet factory.

        - Connect token, challenge token etc.

        - Client/server packet types and negotiation sequence.

        - Encryption manager.

        - Dependency on rapidjson.

        - Network simulator. netcode.io provides the transport, and the simulator support internally as required.

        - Replay protection. Provided by netcode.io.

        - Packet processor.

        - Code for CRC32. We don't need it.

    What stays? 

        - Client/server (although refactored heavily!)

        - Message class. Message factory.

        - Stream classes, bitpacker, serialize functions etc.

        - Channel concept, reliable/unreliable channel types.

        - Address class, for convenience only.

    What is added?

        - Support for different client/server implementations

        - Packet fragmentation and re-assembly from reliable.io

        - Packet loss, latency, jitter estimates from reliable.io

        - Congestion adoidance notification (if possible...)

        - Better implementation of connect tokens via netcode.io

