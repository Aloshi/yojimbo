DONE

TODO

    -------------------

    Design in the concept of both secure and insecure connects at the same time.

    Eg. should be secure by default, but the server can be switched into insecure mode.

    In this mode, packets that are normally encrypted are globally allowed to be received unencrypted.

    When the client connects insecure mode, all packets are sent insecure. No safety here.

    Server allows insecure connections, eg. direct to slot without challenge token.

    Don't put any effort into making this secure or robust... this is just a testing mode
    for the client so they can connect ad-hoc to servers without going through a matchmaker.

    -------------------

    Don't send the heartbeat packet if other packets have been sent recently, eg. don't send if redundant.

    Make sure to do this *only* once the connection has been established. You don't want to miss the first
    game packet sent through (discard) because you are not connected. eg. keep sending heartbeats until
    fully connected on that side, even if other packets are sent.

    -------------------

    Need to implement packet aggregation and fragmentation and reassembly as well inside the socket interface,
    but by composition using base classes so this functionality can easily be reimplemented for other interfaces,
    eg. a network interface implementation that goes over boost asio instead of BSD sockets for example.

    Also in the simulator. The simulator should have the same aggregation behavior.

    -------------------

    Bring across the reliable ordered event system and large block sender.

    Store this reliability level system inside the client/server, have one of these endpoints per-client slot.

    -------------------

    It's annoying that the network interface has to:

    a) manually enable encryption and disable encryption for connection request packet type

    b) clear send and recv queues manually in destructor

    -------------------

    Need to clean up the simulator and create a network interface around the simulator (or implement that interface directly...)

    This is important for tests because even over loopback occasionally packets don't get through (due to thread race)
    which is breaking my functional tests 1/10 runs or so.

    -------------------
