DONE

TODO

    Removing any and all complexity from challenge token.

    The client has already authenticated. The encryption mapping means that only that particular address/port
    can respond with that challenge token, there was no timeout in the challenge token, so the encryption
    mapping timeout was the thing that would expire the challenge response.

    Point is all the challenge response does is say, OK, I'm the client, I actually got the data you
    sent to me, and here is my response that can't really be authenticated.

    You can never go wide on a challenge response because it needs a setup of the encryption mapping.

    Encryption mapping setup can *only* happen with a connect token.

    So any going wide hack with challenge token would necessitate an attack at the connect token level first.

    So removing all this complexity, it doesn't add any security at all!

    ---------------

    Implement way to override construction of the challenge token so it has an early expiry, or a complete
    overriden version of the function that generates the challenge token, and then makes a modification to it
    before returning it?    

    Add a test for the challenge token expiry case.

    ---------------

    Verify that packets sent over the network once client/server are connected have valid sequence #s and these sequence #s 
    are not always zero (make sure proper sequence #s are used)

    Make sure that encrypted packet packets can't get through if they are sent unencrypted. V.important obviously.

    ---------------

    Extend the packet factory so additional packet types above the client/server packet set can be sent and received.

    This needs to be tested, and easy to do, as this is the common situation, extend the client/server
    packet types with your own that must be processed.

    What needs to be done to client and server classes so they can let derived classes handle custom packet types?

    -------------------

    Design in the concept of both secure and insecure connects at the same time.

    Eg. should be secure by default, but the server can be opened up into insecure mode.

    In this mode, packets that are normally encrypted are globally allowed to be received unencrypted.

    When the client connects insecure mode, all packets are sent insecure. No safety here.

    Server allows insecure connections, eg. direct to slot without challenge token.

    -------------------

    Also make the heartbeat only get sent if a packet hasn't been sent for heartbeat rate...

    Don't send them redundantly when other packets are being fired across. Same for client -> server.

    Make sure that received packets, even unknown ones per-the base class let the timeout reset on receive.

    -------------------

    Need to implement packet aggregation and fragmentation and reassembly as well inside the socket interface,
    but by composition using base classes so this functionality can easily be reimplemented for other interfaces,
    eg. a network interface implementation that goes over boost asio instead of BSD sockets for example.

    -------------------

    Possibly implement open/close support for the server.

    Implement a disconnect all clients function.

    If closed while players are connected, disconnect all clients.

    Perhaps open could accept max # of clients?

    -------------------

    Bring across the reliable ordered event system and large block sender.

    Store this reliability level system inside the client/server, have one of these endpoints per-client slot.

    -------------------
