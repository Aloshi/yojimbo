DONE    

TODO

    ------------------

    Create the packet factory for client and server internally via a virtual.

    Set the transport packet factory to the client/server packet factory created internally.

    Remove the code marked with "// todo" that should be removed once client/server packet factory has 

    ------------------

    Create global and per-client allocators on server, and one allocator on client.

    Make sure these allocators are dynamically created according to config via virtual functions. 

    Add an interface something like this to the server:

        GetGlobalAllocator()

        GetClientAllocator( int clientIndex )

    And for the client, just:

        GetAllocator()

    ------------------

    Now make sure all the packet factory, message factory and stream allocator go through the same allocator.

    ------------------

    Setup client/server with limited memory allocator per-client by default, eg. TLSF

    ------------------

    Make sure all tests pass with limited memory per-client.

    ------------------

    Next create global and per-client allocators on server, and one allocator on client.

    Make sure these allocators are dynamically created according to config via virtual functions. 

    Add an interface something like this to the server:

        GetGlobalAllocator()

        GetClientAllocator( int clientIndex )

    And for the client, just:

        GetClientAllocator()

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    Idea: don't allow fragmentation from client -> server, because it is a security risk?

    Alternatively, only allow fragmented packets if they are encrypted in secure mode. Unencrypted ones will not be accepted.   

    ------------------

    Ideal, don't allow fragmentation from client -> server, at least by default, because it is a security risk.

    If it is allowed, provide the user of the library with a way to configure whether it is or isn't supported.

    ------------------

    v0.3.0 release (!!!) YEY! :D

    ------------------
