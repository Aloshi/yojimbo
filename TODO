DONE

TODO

    -------------------

    Port the network interface code to windows.

    Port the platform_time and platform_sleep to windows. (must have some old code around for this...)

    Make sure both the client and server can compile and run on Windows.

    Verify cross connects, eg. windows -> mac client, mac -> windows connect. both -> linux.

    -------------------

    Clean up the simulator and create a network interface around the simulator (or implement that interface directly...)

    This is important for tests because even over loopback occasionally packets don't get through (due to thread race)
    which is breaking my functional tests 1/10 runs or so.

    The simulator needs to *back* an interface, eg. a network simulator is created, and a simulator interface works on top of it.

    Move the tests over to use network simulator interfaces instead of sockets.

    Verify that the tests can run in soak mode, eg. reps and don't break. 

    Make sure all tests pass with ridiculous packet loss as well (90%). Probably need to extend the # of iterations...

    -------------------

    Need to implement packet aggregation and fragmentation and reassembly as well inside the socket interface,
    but by composition using base classes so this functionality can easily be reimplemented for other interfaces,
    eg. a network interface implementation that goes over boost asio instead of BSD sockets for example.

    Also in the simulator. The simulator should have the same aggregation behavior.

    -------------------

    Bring across the reliable ordered event system and large block sender.

    Store this reliability level system inside the client/server, have one of these endpoints per-client slot.

    Consider how the ack system is going to integrate. Custom ack header with bits and so on per-packet? (aggregate packet header?)

    Acks on a message id level instead of acks on a packet level? Who knows. A packet id that increases for each *message*
    packet sent, with packet header just for that packet type? Sure. This is it. This way I don't need to send message
    packets unless there are actually messages to be sent.

    The whole message packet system can be self contained with no bullshit. Awesome. 

    Combine the ack system and the message packet into one system!

    -------------------