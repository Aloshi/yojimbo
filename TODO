DONE    

    Support for different client/server implementations

    Client/server implementation built on top of reliable.io and netcode.io

    Packet fragmentation and re-assembly support from reliable.io

    Better implementation of connect tokens via netcode.io

    Port across secure_server to new API.

    Tracked down (rare) message leak in receive queue overflow.

TODO

    Extend soak test to have unreliable, unordered channel, and to make sure it exercises packet fragmentation and reassembly codepath.

    -------------

    Test compilation on windows.

    Bring across golang web server implementation, but so that it uses the golang netcode.io library in Docker, vs. coding it manually.

    Make sure the golang web server implementation doesn't leak memory (for example, it needs to be updated with the close wrapper).

    Bring across the C++ matcher implementation again, and upgrade it to use the new connect tokens from netcode.io

    Port across secure_client to new API.

    Implement packet loss, latency, jitter estimates from reliable.io

    Integrate QoS settings above with yojimbo client/server and connection.

    Implement congestion adoidance in reliable.io (if reasonably possible given that user is in control of packet sizes...)

    Add unreliable, ordered channel in yojimbo. Simply keep track of the most recently received message id, and discard any messages older than that.

    Extend yojimbo to have detailed logging support, eg. log levels (none, error, info, debug), as well as different modules that can have logging enabled/disabled.

    Extend netcode.io so it can have an overriden logging callback function.

    Extend reliable.io so it can have an overriden assert callback function.

    Extend netcode.io so the user can set a custom allocator to use for client and server allocations.

    Extend reliable.io so the user can set a custom allocator to use for endpoints.

    Integrate custom allocators for netcode.io and reliable.io with client and server allocators in yojimbo.

    Extend netcode.io and reliable.io to minimize packet copying, eg. assume packet is prefixed with available padding in front for headers.

    Profile yojimbo and look for any hot spots.

    Pass over doxygen documentation again.
    
