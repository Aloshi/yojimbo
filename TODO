DONE

TODO

    -------------------
    
    Move the tests over to use network simulator interfaces instead of sockets.

    Bump up the packet loss and network conditions to ridiculous levels and make sure all tests pass.

    -------------------

    Need to implement packet aggregation and fragmentation and reassembly as well inside the socket interface,
    but by composition using base classes so this functionality can easily be reimplemented for other interfaces,
    eg. a network interface implementation that goes over boost asio instead of BSD sockets for example.

    Also in the simulator. The simulator should have the same aggregation behavior.

    -------------------

    Bring across the reliable ordered event system and large block sender.

    Store this reliability level system inside the client/server, have one of these endpoints per-client slot.

    Consider how the ack system is going to integrate. Custom ack header with bits and so on per-packet? (aggregate packet header?)

    Acks on a message id level instead of acks on a packet level? Who knows. A packet id that increases for each *message*
    packet sent, with packet header just for that packet type? Sure. This is it. This way I don't need to send message
    packets unless there are actually messages to be sent.

    The whole message packet system can be self contained with no bullshit. Awesome. 

    Combine the ack system and the message packet into one system!

    -------------------
