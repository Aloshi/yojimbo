DONE    

TODO

    ------------------

    Create global and per-client allocators on server.

    Make sure these allocators are dynamically created according to config via virtual functions. 

    Add an interface something like this to the server:

        GetAllocator( ServerResourceType, int clientIndex )

    This way the functions that create resources (and delete them) can trivially get the correct allocator.

    ------------------

    Now make sure all the packet factory, message factory and stream allocator go through the same allocator.

    ------------------

    Setup client/server with limited memory per-client by default, eg. TLSF allocator for the per-client and global allocators.

    ------------------

    Make sure all tests pass with limited memory per-client.

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    Idea: don't allow fragmentation from client -> server, because it is a security risk?

    Alternatively, only allow fragmented packets if they are encrypted in secure mode. Unencrypted ones will not be accepted.   

    ------------------

    Ideal, don't allow fragmentation from client -> server, at least by default, because it is a security risk.

    If it is allowed, provide the user of the library with a way to configure whether it is or isn't supported.

    Perhaps it is OK to allow, but only on encrypted packet types, don't allow it on connection request packets.

    ------------------

    v0.3.0 release (!!!) YEY! :D

    ------------------
