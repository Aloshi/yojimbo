{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"s",
				"source"
			],
			[
				"CLIENT",
				"CLIENT_STATE_SENDING_CHALLENGE_RESPONSE"
			],
			[
				"PACKET_P",
				"PACKET_PROCESSOR_WRITE_PACKET_FAILED"
			],
			[
				"server",
				"serverAddresses"
			],
			[
				"client",
				"client_to_server_key"
			],
			[
				"decr",
				"decryptedMessageLength"
			],
			[
				"CONNECTION",
				"CONNECTION_DENIED_ALREADY_CONNECTED"
			],
			[
				"CLIENT_STATE_CONN",
				"CLIENT_STATE_CONNECTION_REQUEST_TIMED_OUT"
			],
			[
				"CLIENT_STAT",
				"CLIENT_STATE_SENDING_CHALLENGE_RESPONSE"
			],
			[
				"CLIENT_STATE",
				"CLIENT_STATE_SENDING_CONNECTION_REQUEST"
			],
			[
				"last",
				"last_packet_send_time"
			],
			[
				"m_last",
				"m_lastPacketReceiveTime"
			],
			[
				"m_clie",
				"m_clientConnected"
			],
			[
				"CLIENT_STATE_",
				"CLIENT_STATE_SENDING_CHALLENGE_RESPONSE"
			],
			[
				"PACKET_",
				"PACKET_CONNECTION_CHALLENGE"
			],
			[
				"CLIENT_S",
				"CLIENT_STATE_SENDING_CONNECTION_REQUEST"
			],
			[
				"SOCKET_ERROR_BIND_",
				"SOCKET_ERROR_BIND_IPV6_FAILED"
			],
			[
				"SOCKET_ERROR",
				"SOCKET_ERROR_SOCKOPT_IPV6_ONLY_FAILED"
			],
			[
				"Cha",
				"ChallengeTimeOut"
			],
			[
				"m_hash",
				"m_challengeHash"
			],
			[
				"ch",
				"ChallengeHashSize"
			],
			[
				"num",
				"number"
			],
			[
				"time",
				"last_packet_send_time"
			],
			[
				"Challenge",
				"ServerChallengeEntry"
			],
			[
				"Se",
				"ServerChallengeHash"
			],
			[
				"Chan",
				"ChallengeHashSize"
			],
			[
				"challenge",
				"challenge_entry"
			],
			[
				"PROTOCOL",
				"PROTOCOL2_DECLARE_VIRTUAL_SERIALIZE_FUNCTIONS"
			],
			[
				"aggregate",
				"aggregateReadHeader"
			],
			[
				"PROTOCOL2_ERROR_SER",
				"PROTOCOL2_ERROR_SERIALIZE_HEADER_FAILED"
			],
			[
				"aggreg",
				"aggregatePacketHeader"
			],
			[
				"PROTOCOL2_ERROR_FAIL",
				"PROTOCOL2_ERROR_SERIALIZE_HEADER_FAILED"
			],
			[
				"PROTOCOL2_ERROR",
				"PROTOCOL2_ERROR_CREATE_PACKET_FAILED"
			],
			[
				"MaxPe",
				"MaxPacketsPerIteration"
			],
			[
				"numPackets",
				"numPacketsRead"
			],
			[
				"max",
				"maxPacketsToRead"
			],
			[
				"MaxPackets",
				"MaxPacketsPerIteration"
			],
			[
				"numPAckets",
				"numPacketsWritten"
			],
			[
				"previous",
				"previous"
			],
			[
				"prve",
				"previous"
			],
			[
				"nu",
				"previousChunkNumSlices"
			],
			[
				"force",
				"forceAckPreviousChunk"
			],
			[
				"Packet",
				"PacketBufferEntry"
			],
			[
				"Max",
				"MaxFragmentSize"
			],
			[
				"SERIALIZE_",
				"PROTOCOL2_SERIALIZE_OBJECT"
			],
			[
				"rec",
				"receivedFragments"
			],
			[
				"MaxFrag",
				"MaxFragmentsPerPacket"
			],
			[
				"total",
				"total_fragments"
			],
			[
				"sequence",
				"sequence_difference"
			],
			[
				"MAX",
				"MaxFragmentSize"
			],
			[
				"PROTOCOL2_ERR",
				"PROTOCOL2_STREAM_ERROR_NONE"
			],
			[
				"TEST_PACKET",
				"TEST_PACKET_NUM_TYPES"
			],
			[
				"SYNC_MODE_",
				"SYNC_MODE_ADAPTIVE_SMOOTHING"
			],
			[
				"SYNC_MODE_QU",
				"SYNC_MODE_QUANTIZE_ON_BOTH_SIDES"
			],
			[
				"SYNC",
				"SYNC_MODE_UNCOMPRESSED"
			],
			[
				"min",
				"min_ticks_ahead"
			],
			[
				"old_st",
				"oldest_input_in_packet"
			],
			[
				"ready_to_",
				"ready_to_apply_adjustment_offset"
			],
			[
				"time_",
				"time_last_dropped_input"
			],
			[
				"server_cet",
				"server_get_client_input"
			],
			[
				"Input",
				"InputSlidingWindowSize"
			],
			[
				"ready",
				"ready_to_apply_sync"
			],
			[
				"client_",
				"client_sync_data"
			],
			[
				"tim",
				"time_last_packet_received"
			],
			[
				"PACKET",
				"PACKET_TYPE_CONNECTION_REQUEST"
			],
			[
				"PACKET_TYPE",
				"PACKET_TYPE_INPUT"
			],
			[
				"PACKET_TYPE_",
				"PACKET_TYPE_CONNECTION_DENIED"
			],
			[
				"PACK",
				"PACKET_TYPE_CONNECTION_REQUEST"
			],
			[
				"COMP",
				"COMPRESSION_MODE_ORIENTATION"
			],
			[
				"COM",
				"COMPRESSION_MODE_NO_VELOCITY"
			],
			[
				"position",
				"position_error_dist_squared"
			],
			[
				"pos",
				"position_error"
			],
			[
				"STATE",
				"STATEFUL_MODE_INPUT_AND_STATE"
			],
			[
				"Priority",
				"CubePriorityInfo"
			],
			[
				"Quant",
				"QuantizedPositionBoundXY"
			],
			[
				"Position",
				"QuantizedPositionBoundXY"
			],
			[
				"Quantiz",
				"QuantizedSnapshotWithVelocity"
			],
			[
				"Qua",
				"QuantizedCubeState"
			],
			[
				"linera_",
				"linear_velocity_y"
			],
			[
				"DELTA_MODE",
				"DELTA_MODE_RELATIVE_INDEX"
			],
			[
				"COMPRESSION_MODE",
				"COMPRESSION_MODE_POSITION"
			],
			[
				"abso",
				"absolute_position_bits"
			],
			[
				"absol",
				"absolute_quaternion_bits"
			],
			[
				"ab",
				"absolute_quaternion_bits"
			],
			[
				"Rel",
				"RelativeQuaternionLargeW"
			],
			[
				"quater",
				"quaternion_negative_w"
			],
			[
				"COMPRESSION",
				"COMPRESSION_MODE_QUANTIZE_POSITION"
			],
			[
				"QuantizedPosition",
				"QuantizedPositionBoundXY"
			],
			[
				"snap",
				"snapshot_sequence_buffer"
			],
			[
				"CONTEXT_SNAP",
				"CONTEXT_SNAPSHOT_SLIDING_WINDOW"
			],
			[
				"ntework",
				"network_simulator"
			],
			[
				"snapshot",
				"snapshot_sliding_window"
			],
			[
				"m_ba",
				"m_bandwidthExclude"
			],
			[
				"received",
				"received_snapshot_this_frame"
			],
			[
				"COMPRES",
				"COMPRESSION_MODE_UNCOMPRESSED"
			],
			[
				"INT",
				"SNAPSHOT_INTERPOLATION_HERMITE"
			],
			[
				"SNAPSHOT_MODE_",
				"SNAPSHOT_MODE_LINEAR_INTERPOLATION_10PPS"
			],
			[
				"SNAPSHOT_MODE",
				"SNAPSHOT_MODE_NAIVE_60PPS_JITTER"
			],
			[
				"interpo",
				"interpolation_start_time"
			],
			[
				"inter",
				"interpolation_start_time"
			],
			[
				"SNAPSHOT_IN",
				"SNAPSHOT_INTERPOLATION_HERMITE"
			],
			[
				"SNAPSHOT",
				"SNAPSHOT_INTERPOLATION_LINEAR"
			],
			[
				"LOCK",
				"LOCKSTEP_MODE_DETERMINISTIC"
			],
			[
				"mode",
				"snapshot_mode_data"
			],
			[
				"STONE",
				"STONE_MODE_HDR_TEST"
			],
			[
				"vec",
				"vectorial"
			],
			[
				"new",
				"network_simulator"
			],
			[
				"playout",
				"playout_delay_buffer"
			],
			[
				"LOK",
				"LOCKSTEP_PACKET_INPUTS"
			],
			[
				"in",
				"input_sliding_window"
			],
			[
				"CommandLin",
				"CommandLineBufferSize"
			],
			[
				"model",
				"modelViewProjection"
			],
			[
				"test_stone_board_",
				"test_stone_board_collision_none"
			],
			[
				"mesh",
				"mesh_filename"
			],
			[
				"command",
				"CommandHistorySize"
			],
			[
				"commandHistory",
				"commandHistoryIsEmpty"
			],
			[
				"Stone",
				"stoneSizeNames"
			],
			[
				"vertex",
				"VertexPosition"
			],
			[
				"CLIENT_STT",
				"CLIENT_STATE_CONNECTED"
			],
			[
				"test_client_and_",
				"test_client_and_server_data_reconnect"
			],
			[
				"datablock",
				"dataBlockReceiver"
			],
			[
				"ClientServerDatABlock",
				"ClientServerDataBlockSender"
			],
			[
				"ClientSer",
				"ClientServerDataBlockSender"
			],
			[
				"test_",
				"test_data_block_send_and_receive_packet_loss"
			],
			[
				"CLIENT_STATE_SENDING",
				"CLIENT_STATE_SENDING_CLIENT_DATA"
			],
			[
				"UpdatESend",
				"UpdateSendClientData"
			],
			[
				"read",
				"readyForConnection"
			],
			[
				"SERVER",
				"SERVER_CLIENT_STATE_READY_FOR_CONNECTION"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					""
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					""
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/C++11 (Server).sublime-build",
					""
				],
				[
					"Packages/User/C++11 (Server).sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C++11 (Server).sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 107.0,
		"last_filter": "TODO",
		"selected_items":
		[
			[
				"TODO",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"syntax mark",
				"Set Syntax: Markdown"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package install",
				"Package Control: Install Package"
			],
			[
				"Packinst",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Commit history"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"Pack",
				"Package Control: Disable Package"
			],
			[
				"Package",
				"Preferences: Browse Packages"
			],
			[
				"Clang",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Sub",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"Install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 416.0,
		"history":
		[
			"print 'hello'",
			"print \"hello\"",
			"ls",
			"ls -al",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/gaffer/git/libyojimbo"
	],
	"file_history":
	[
		"/Users/gaffer/git/libyojimbo/TODO",
		"/Users/gaffer/git/libyojimbo/yojimbo_client_server.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_client_server.cpp",
		"/Users/gaffer/git/libyojimbo/CHANGES",
		"/Users/gaffer/git/libyojimbo/client_server.cpp",
		"/Users/gaffer/git/libyojimbo/premake5.lua",
		"/Users/gaffer/git/libyojimbo/yojimbo_crypto.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_socket_interface.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_common.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_common.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet_processor.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_socket_interface.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_interface.h",
		"/Users/gaffer/git/libyojimbo/yojimbo.h",
		"/Users/gaffer/git/libyojimbo/test.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_crypto.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_simulator.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_config.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_simulator.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet_processor.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_memory.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_bitpack.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_stream.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_serialize.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_protocol.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_protocol.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_network.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_network.cpp",
		"/Users/gaffer/git/libyojimbo/sodium/crypto_aead_chacha20poly1305.h",
		"/Users/gaffer/git/libyojimbo/network2.h",
		"/Users/gaffer/git/libyojimbo/protocol2.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_util.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_types.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_queue.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_hash.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_allocator.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_array.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_memory.cpp",
		"/Users/gaffer/git/protocol2/premake5.lua",
		"/Users/gaffer/git/protocol2/yojimbo_socket_interface.h",
		"/Users/gaffer/git/protocol2/yojimbo_socket_interface.cpp",
		"/Users/gaffer/git/protocol2/007_packet_encryption.cpp",
		"/Users/gaffer/git/protocol2/TODO",
		"/Users/gaffer/git/protocol2/yojimbo_packet_processor.h",
		"/Users/gaffer/git/protocol2/yojimbo_packet_processor.cpp",
		"/Users/gaffer/git/protocol2/CHANGES",
		"/Users/gaffer/git/protocol2/yojimbo_network_interface.h",
		"/Users/gaffer/git/protocol2/yojimbo_crypto.h",
		"/Users/gaffer/git/protocol2/yojimbo_crypto.cpp",
		"/Users/gaffer/git/protocol2/network2.h",
		"/Users/gaffer/git/protocol2/protocol2.h",
		"/Users/gaffer/git/protocol2/test.cpp",
		"/Users/gaffer/git/protocol2/008_securing_dedicated_servers.cpp",
		"/Users/gaffer/git/protocol2/006_client_server.cpp",
		"/Users/gaffer/git/protocol2/yojimbo.cpp",
		"/Users/gaffer/git/protocol2/yojimbo_config.h",
		"/Users/gaffer/git/protocol2/001_reading_and_writing_packets.cpp",
		"/Users/gaffer/git/protocol2/002_serialization_strategies.cpp",
		"/Users/gaffer/git/protocol2/003_packet_fragmentation_and_reassembly.cpp",
		"/Users/gaffer/git/protocol2/004_sending_large_blocks_of_data.cpp",
		"/Users/gaffer/Desktop/CONTRACT GOALS",
		"/Users/gaffer/git/protocol2/temp.cpp",
		"/Users/gaffer/git/protocol2/yojimbo.h",
		"/Users/gaffer/git/protocol2/yojimbo_types.h",
		"/Users/gaffer/git/protocol2/yojimbo_array.h",
		"/Users/gaffer/git/protocol2/yojimbo_queue.h",
		"/Users/gaffer/git/protocol2/yojimbo_hash.h",
		"/Users/gaffer/git/protocol2/yojimbo_memory.h",
		"/Users/gaffer/git/protocol2/yojimbo_allocator.h",
		"/Users/gaffer/git/protocol/src/Protocol/MessageFactory.h",
		"/Users/gaffer/git/protocol/src/Network/BSDSocket.cpp",
		"/Users/gaffer/git/protocol/src/Network/BSDSocket.h",
		"/Users/gaffer/git/protocol/src/Protocol/ProtocolEnums.h",
		"/Users/gaffer/git/protocol/src/Network/Enums.h",
		"/Users/gaffer/git/protocol2/vectorial/simd4f_neon.h",
		"/Users/gaffer/git/protocol2/vectorial/vec3f.h",
		"/Users/gaffer/git/protocol2/yojimbo_memory.cpp",
		"/Users/gaffer/git/protocol2/untitled",
		"/Users/gaffer/git/protocol/src/Core/Core.cpp",
		"/Users/gaffer/git/protocol/tests/Protocol/TestBitArray.cpp",
		"/Users/gaffer/git/protocol2/005_packet_aggregation.cpp",
		"/Users/gaffer/git/protocol/src/Core/File.cpp",
		"/Users/gaffer/git/protocol/premake4.lua",
		"/Users/gaffer/git/protocol/src/Network/Interface.h",
		"/Users/gaffer/git/protocol/src/Core/Hash.h",
		"/Users/gaffer/git/protocol/src/Protocol/Stream.h",
		"/Users/gaffer/Downloads/25_TIER.csv",
		"/Users/gaffer/Documents/CHORES",
		"/Users/gaffer/Documents/EXERCISE",
		"/Users/gaffer/git/protocol/src/ClientServer/Server.h",
		"/Users/gaffer/git/protocol/src/ClientServer/ClientServerPackets.h",
		"/Users/gaffer/Documents/BIZDEV",
		"/Users/gaffer/Documents/INDIE DISCOUNT",
		"/Users/gaffer/Desktop/bcrypt.c",
		"/Users/gaffer/git/protocol/src/Network/Network.cpp",
		"/Users/gaffer/Documents/PLANNING",
		"/Users/gaffer/Documents/STRATEGY",
		"/Users/gaffer/Documents/PATREON",
		"/Users/gaffer/Desktop/press.txt",
		"/Users/gaffer/Desktop/Building a Game Network Protocol/premake5.lua",
		"/Users/gaffer/git/protocol2/006_reliable_packets.cpp",
		"/Users/gaffer/Backup/netgame/02 - Virtual Connection over UDP/Net.h",
		"/Users/gaffer/git/protocol2/premake4.lua",
		"/Users/gaffer/.ssh/known_hosts",
		"/Users/gaffer/Backup/transport2/src/TransportSockets.cpp",
		"/Users/gaffer/Backup/transport2/include/TransportSockets.h",
		"/Volumes/FLASH DRIVE/test.txt",
		"/Users/gaffer/Documents/STUDY",
		"/Users/gaffer/Documents/TODO",
		"/Users/gaffer/Documents/HOME",
		"/Users/gaffer/source code/patreon.txt",
		"/Users/gaffer/Documents/CLOTHES",
		"/Users/gaffer/Documents/BUSINESS",
		"/Users/gaffer/Documents/gafferongames.com",
		"/Users/gaffer/Documents/FINANCES",
		"/Users/gaffer/Documents/CORPORATE",
		"/Users/gaffer/Documents/GAFFERONGAMES",
		"/Users/gaffer/Documents/HOME OFFICE",
		"/Users/gaffer/Documents/INTUIT",
		"/Users/gaffer/Documents/OPPORTUNITIES",
		"/Users/gaffer/Documents/MONEY",
		"/Users/gaffer/Documents/SECURITY",
		"/Users/gaffer/Documents/PREP",
		"/Users/gaffer/Documents/STOCKS",
		"/Users/gaffer/Documents/STUFF"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"-CHANGES,-TODO,-WOULDBENICE",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"",
			"-CHANGES,-TODO",
			"-CHANGES,TODO",
			"-CHANGES",
			"-CHANGES -TODO",
			"",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"sam/*.h;sam/*.cpp",
			"sam/*.h,sam/*.cpp",
			"sam/*.h sam/*.cpp",
			"*.h *.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"*.h",
			"*.cpp",
			"*.cpp *.h",
			"*.cpp; *.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"printf",
			"IsConnected",
			"ResetConnection",
			"m_clientState = ",
			"ResetConnect",
			"ResetConncet",
			"Packets",
			"PACKET_CONNECTION_RESPONSE",
			"SendPacket",
			"->SendPacket",
			"SendPacketToConnectedClient",
			"bool SendPacketToConnect",
			"void SendPacketToConnect",
			"SendPacket",
			"PacketType",
			"SendPacketToConnectedClient",
			"TimeOut",
			"ConnectClient",
			"printf",
			"DestroyPacket",
			"SendPackets",
			"SendPacketToServer",
			"DisconnectClient",
			"protocol.h",
			"printf",
			"uint8_t*",
			"void*",
			"CRT_SECURE",
			"NETWORK2",
			"NetworkSocket",
			"NETWORK2_",
			"YOJIMBO_ADD",
			"protocol2",
			"Object*",
			"protocol2::",
			"y",
			"protocol2",
			"PROTOCOL2",
			"DEBUG_MEM",
			"PROTOCOL2",
			"PROTOCOL2_",
			"PROTOCOL2",
			"SOCKET_INTERFACE_COUNTER_ENCRYPTED_PACKETS_READ",
			"SOCKET_INTERFACE_COUNTER_PACKETS_WRITTEN",
			"#if DEBUG",
			"NETWORK2_SOCKETS",
			"error",
			"YOJIMBO_SECURE",
			"rawFormat",
			"rawMode",
			"sockaddr_storage",
			"addrinfo",
			"PROTOCOL2_SER",
			"PROTOCOL2_ASSERT_ON",
			"PROTOCOL2_SERIALIZE_CHECKS",
			"#define PROTOCOL2_SERIALIZE_CHECKS              1\n",
			"PROTOCOL2_ASSERT_ON_SERIALIZE_CHECK",
			"ProcessConnectionRequest",
			"PacketFactory",
			"ChallengeToken",
			"crc32 mismatch",
			"215",
			"Encrypt",
			"ChallengeToken",
			"GenerateToken",
			"TokenBytes",
			"AuthBytes",
			"TokenBytes",
			"queue::",
			"// todo",
			"ConnectionRequestDenied",
			"todo",
			"disconnected client %d:",
			"ProcessDisc",
			"// todo",
			"CONNECTION_RESPONSE",
			"FULL",
			"DISCONNECT",
			"DISCONNECTED",
			"// todo",
			"ConnectClient",
			"ReadPackets",
			"// todo",
			"ConnectionResponsePacket",
			"FindExistingClientIndex",
			"KeepAlivePacket",
			"Process",
			"KeepAlivePacket",
			"SendPackets",
			"ProcessConnectionResponse",
			"ProcessCha",
			"ResetClientState",
			"// todo",
			"processing connection response",
			"SendPackets",
			"ConnectClient",
			"ReceivePackets",
			"ReceivePackes",
			"ReadPackets",
			"ReadPacket",
			"PACKET_CONNECTION_DENIED",
			"ConnectionDeniedPacket",
			"ConnectionDenied",
			"ConnectionChallenge",
			"ConnectionDeniedPacket",
			"ProcessConnectionRequest",
			"protocol2::",
			"Packet",
			"CORE_",
			"double time",
			"yojimbo::",
			"class Server",
			"nullptr",
			"class Server",
			"Server",
			"auto",
			"nullptr",
			": public Allocator",
			"CORE_",
			"CORE_DEBUG",
			"YOJIMBO_NEW",
			"packetBuf",
			"queue::reserve",
			"CORE_",
			"core::",
			"core",
			"namespace core",
			"CORE_ASSERT"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"SequenceBuffer",
			"sequence_buffer",
			"SequenceBuffer",
			"sliding_window",
			"network_buffer.",
			"NetworkBuffer<",
			"ring_buffer",
			"CORE_ASSERT",
			"CORE_ASSERT_CLOSE",
			"CORE_ASSERT",
			"CORE_CHECK",
			"CORE_ARRAY_NEW",
			"CORE_NEW_ARRAY",
			"CORE_DELETE_ARRAY",
			"CORE_DELETE",
			"CORE_NEW",
			"CORE_ASSERT",
			"Simulator::",
			"memory_globals.",
			"global.",
			"PROTOCOL_CHECK(",
			"PROTOCOL_ASSERT(",
			"assert",
			"bitpacker",
			"    ",
			"namespace sam",
			"namespace sam {",
			"America 2008-2012",
			"netProtocolOld.h"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 524.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "yojimbo.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"t",
				"TODO"
			],
			[
				"yoj",
				"yojimbo.cpp"
			],
			[
				"cryp",
				"yojimbo_crypto.cpp"
			],
			[
				"pre",
				"premake5.lua"
			],
			[
				"changes",
				"CHANGES"
			],
			[
				"todo",
				"TODO"
			],
			[
				"socket_interface.h",
				"yojimbo_socket_interface.h"
			],
			[
				"client",
				"yojimbo_client_server.cpp"
			],
			[
				"client_server.cpp",
				"client_server.cpp"
			],
			[
				"socket_inter",
				"yojimbo_socket_interface.h"
			],
			[
				"packet_processor",
				"yojimbo_packet_processor.h"
			],
			[
				"socket",
				"yojimbo_socket_interface.cpp"
			],
			[
				"networkinterf",
				"yojimbo_network_interface.h"
			],
			[
				"",
				"yojimbo_client_server.cpp"
			],
			[
				"cl",
				"client_server.cpp"
			],
			[
				"client_server",
				"yojimbo_client_server.cpp"
			],
			[
				"common.h",
				"yojimbo_common.h"
			],
			[
				"client_server.h",
				"yojimbo_client_server.h"
			],
			[
				"client.cp",
				"client_server.cpp"
			],
			[
				"test.cpp",
				"test.cpp"
			],
			[
				"client_",
				"client_server.cpp"
			],
			[
				"cs",
				"client_server.cpp"
			],
			[
				"yojimbo.h",
				"yojimbo.h"
			],
			[
				"clie",
				"client_server.cpp"
			],
			[
				"seriaiz.h",
				"yojimbo_serialize.h"
			],
			[
				"cs.cpp",
				"client_server.cpp"
			],
			[
				"yojimbo.cpp",
				"yojimbo.cpp"
			],
			[
				"crypto.h",
				"yojimbo_crypto.h"
			],
			[
				"simulator.h",
				"yojimbo_network_simulator.h"
			],
			[
				"config.h",
				"yojimbo_config.h"
			],
			[
				"network.cpp",
				"yojimbo_network.cpp"
			],
			[
				"network.h",
				"yojimbo_network.h"
			],
			[
				"netwokr.h",
				"yojimbo_network.h"
			],
			[
				"packet.cpp",
				"yojimbo_packet.cpp"
			],
			[
				"protocol.h",
				"yojimbo_protocol.h"
			],
			[
				"serialize.h",
				"yojimbo_serialize.h"
			],
			[
				"protoco.lh",
				"yojimbo_protocol.h"
			],
			[
				"protocol",
				"yojimbo_protocol.h"
			],
			[
				"common.cpp",
				"yojimbo_common.cpp"
			],
			[
				"protocol.cpp",
				"yojimbo_protocol.cpp"
			],
			[
				"packet_processor.h",
				"yojimbo_packet_processor.h"
			],
			[
				"packet",
				"yojimbo_packet_processor.cpp"
			],
			[
				"pr",
				"premake5.lua"
			],
			[
				"netw",
				"yojimbo_network.h"
			],
			[
				"config",
				"yojimbo_config.h"
			],
			[
				"network2.h",
				"network2.h"
			],
			[
				"yojimbo_protocol.h",
				"yojimbo_protocol.h"
			],
			[
				"protocol2h.",
				"protocol2.h"
			],
			[
				"yo",
				"yojimbo.h"
			],
			[
				"protocol2h",
				"protocol2.h"
			],
			[
				"premake5",
				"premake5.lua"
			],
			[
				"premake5.lua",
				"protocol2/premake5.lua"
			],
			[
				"007",
				"007_packet_encryption.cpp"
			],
			[
				"socket_interface.cpp",
				"yojimbo_socket_interface.cpp"
			],
			[
				"protocol2.h",
				"protocol2.h"
			],
			[
				"network2h",
				"network2.h"
			],
			[
				"yojimbo_con",
				"yojimbo_config.h"
			],
			[
				"006",
				"006_client_server.cpp"
			],
			[
				"packet_processor.cpp",
				"yojimbo_packet_processor.cpp"
			],
			[
				"008",
				"008_securing_dedicated_servers.cpp"
			],
			[
				"004",
				"004_sending_large_blocks_of_data.cpp"
			],
			[
				"003",
				"003_packet_fragmentation_and_reassembly.cpp"
			],
			[
				"002",
				"002_serialization_strategies.cpp"
			],
			[
				"001",
				"001_reading_and_writing_packets.cpp"
			],
			[
				"socket_interfac",
				"yojimbo_socket_interface.h"
			],
			[
				"yojimbo_socket",
				"yojimbo_socket_interface.cpp"
			],
			[
				"packet_process",
				"yojimbo_packet_processor.cpp"
			],
			[
				"canges",
				"CHANGES"
			],
			[
				"bsdsocket.",
				"~/git/protocol/src/Network/BSDSocket.cpp"
			],
			[
				"hash",
				"yojimbo_hash.h"
			],
			[
				"q",
				"yojimbo_queue.h"
			],
			[
				"yojimbo_queue.h",
				"yojimbo_queue.h"
			],
			[
				"array",
				"yojimbo_array.h"
			],
			[
				"types",
				"yojimbo_types.h"
			],
			[
				"memory.h",
				"yojimbo_memory.h"
			],
			[
				"allocator",
				"yojimbo_allocator.h"
			],
			[
				"yoh",
				"yojimbo.h"
			],
			[
				"ya",
				"yojimbo_allocator.h"
			],
			[
				"yojim",
				"yojimbo.cpp"
			],
			[
				"y",
				"yojimbo.h"
			],
			[
				"allocator.h",
				"yojimbo_allocator.h"
			],
			[
				"memory.cpp",
				"yojimbo_memory.cpp"
			],
			[
				"alloc",
				"yojimbo_allocator.h"
			],
			[
				"yojm",
				"yojimbo_config.h"
			],
			[
				"mem",
				"yojimbo_memory.cpp"
			],
			[
				"memo",
				"yojimbo_memory.h"
			],
			[
				"queue.h",
				"yojimbo_queue.h"
			],
			[
				"types.h",
				"yojimbo_types.h"
			],
			[
				"queue",
				"yojimbo_queue.h"
			],
			[
				"yom",
				"yojimbo.cpp"
			],
			[
				"006_",
				"006_client_server.cpp"
			],
			[
				"net",
				"network2.h"
			],
			[
				"005",
				"005_packet_aggregation.cpp"
			],
			[
				"netwokr2.h",
				"network2.h"
			],
			[
				"netwo",
				"network2.h"
			],
			[
				"netwokr2",
				"network2.h"
			],
			[
				"protocl2.h",
				"protocol2.h"
			],
			[
				"tw",
				"network2.h"
			],
			[
				"chanes",
				"CHANGES"
			],
			[
				"prem",
				"premake5.lua"
			],
			[
				"premake",
				"premake4.lua"
			],
			[
				"premake4.lua",
				"premake4.lua"
			],
			[
				"quat",
				"vectorial/quat4f.h"
			],
			[
				"quat4.f",
				"vectorial/quat4f.h"
			],
			[
				"chang",
				"CHANGES"
			],
			[
				"protoco2l.h",
				"protocol2.h"
			],
			[
				"quat4.h",
				"vectorial/quat4f.h"
			],
			[
				"vec4.h",
				"vectorial/vec4f.h"
			],
			[
				"quat4f.h",
				"vectorial/quat4f.h"
			],
			[
				"test",
				"test.cpp"
			],
			[
				"2",
				"002_serialization_strategies.cpp"
			],
			[
				"work",
				"~/Documents/WORKLOG"
			],
			[
				"done",
				"~/Documents/DONE"
			],
			[
				"proto",
				"protocol2.h"
			],
			[
				"03",
				"003_sending_large_blocks_of_data_quickly_and_reliably.cpp"
			],
			[
				"output.txt",
				"output.txt"
			],
			[
				"001_read",
				"001_reading_and_writing_packets.cpp"
			],
			[
				"networ",
				"network2.h"
			],
			[
				"network2h.",
				"network2.h"
			],
			[
				"premake4",
				"premake4.lua"
			],
			[
				"010",
				"001_reading_and_writing_packets.cpp"
			],
			[
				"002.",
				"002_packet_fragmentation_and_reassembly.cpp"
			],
			[
				"002_",
				"002_packet_fragmentation_and_reassembly.cpp"
			],
			[
				"pe",
				"premake4.lua"
			],
			[
				"read",
				"001_reading_and_writing_packets.cpp"
			],
			[
				"networksimulator.cpp",
				"src/Network/Simulator.cpp"
			],
			[
				"client.cpp",
				"src/ClientServer/Client.cpp"
			],
			[
				"syncdemo.cpp",
				"src/Game/SyncDemo.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 404.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 276.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
