{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"YOJ",
				"YOJIMBO_PLATFORM"
			],
			[
				"Conne",
				"ConnectionFailed"
			],
			[
				"CLIENT_STATE_",
				"CLIENT_STATE_CHALLENGE_RESPONSE_TIMED_OUT"
			],
			[
				"Find",
				"FindConnectTokenEntry"
			],
			[
				"Net",
				"NetworkSimulator"
			],
			[
				"HeartB",
				"ConnectionHeartBeatPacket"
			],
			[
				"GetFirst",
				"GetFirstLocalIPV4Address"
			],
			[
				"ADDRES",
				"ADDRESS_IPV4"
			],
			[
				"num",
				"numInterfaces"
			],
			[
				"INSE",
				"YOJIMBO_INSECURE_CONNECT"
			],
			[
				"InsecureC",
				"InsecureConnectPacket"
			],
			[
				"CLIENT_STATE",
				"CLIENT_STATE_SENDING_INSECURE_CONNECT"
			],
			[
				"serialize_int",
				"serialize_uint64"
			],
			[
				"m_all",
				"m_allPacketTypes"
			],
			[
				"CLIENT_SERVER",
				"CLIENT_SERVER_PACKET_CONNECTION_HEARTBEAT"
			],
			[
				"Is",
				"IsEncryptedPacketType"
			],
			[
				"GetNum",
				"GetNumGamePacketsReceived"
			],
			[
				"Challenge",
				"ChallengeTokenBytes"
			],
			[
				"CLIENT_STATE_CONNECT",
				"CLIENT_STATE_CONNECTION_DENIED"
			],
			[
				"exp",
				"expiryTimestamp"
			],
			[
				"time",
				"timestampOffsetInSeconds"
			],
			[
				"Conn",
				"ConnectionFailed"
			],
			[
				"m_",
				"m_encryptionMappingTimeout"
			],
			[
				"s",
				"source"
			],
			[
				"CLIENT",
				"CLIENT_STATE_SENDING_CHALLENGE_RESPONSE"
			],
			[
				"PACKET_P",
				"PACKET_PROCESSOR_WRITE_PACKET_FAILED"
			],
			[
				"server",
				"serverAddresses"
			],
			[
				"client",
				"client_to_server_key"
			],
			[
				"decr",
				"decryptedMessageLength"
			],
			[
				"CONNECTION",
				"CONNECTION_DENIED_ALREADY_CONNECTED"
			],
			[
				"CLIENT_STATE_CONN",
				"CLIENT_STATE_CONNECTION_REQUEST_TIMED_OUT"
			],
			[
				"CLIENT_STAT",
				"CLIENT_STATE_SENDING_CHALLENGE_RESPONSE"
			],
			[
				"last",
				"last_packet_send_time"
			],
			[
				"m_last",
				"m_lastPacketReceiveTime"
			],
			[
				"m_clie",
				"m_clientConnected"
			],
			[
				"PACKET_",
				"PACKET_CONNECTION_CHALLENGE"
			],
			[
				"CLIENT_S",
				"CLIENT_STATE_SENDING_CONNECTION_REQUEST"
			],
			[
				"SOCKET_ERROR_BIND_",
				"SOCKET_ERROR_BIND_IPV6_FAILED"
			],
			[
				"SOCKET_ERROR",
				"SOCKET_ERROR_SOCKOPT_IPV6_ONLY_FAILED"
			],
			[
				"Cha",
				"ChallengeTimeOut"
			],
			[
				"m_hash",
				"m_challengeHash"
			],
			[
				"ch",
				"ChallengeHashSize"
			],
			[
				"Se",
				"ServerChallengeHash"
			],
			[
				"Chan",
				"ChallengeHashSize"
			],
			[
				"challenge",
				"challenge_entry"
			],
			[
				"PROTOCOL",
				"PROTOCOL2_DECLARE_VIRTUAL_SERIALIZE_FUNCTIONS"
			],
			[
				"aggregate",
				"aggregateReadHeader"
			],
			[
				"PROTOCOL2_ERROR_SER",
				"PROTOCOL2_ERROR_SERIALIZE_HEADER_FAILED"
			],
			[
				"aggreg",
				"aggregatePacketHeader"
			],
			[
				"PROTOCOL2_ERROR_FAIL",
				"PROTOCOL2_ERROR_SERIALIZE_HEADER_FAILED"
			],
			[
				"PROTOCOL2_ERROR",
				"PROTOCOL2_ERROR_CREATE_PACKET_FAILED"
			],
			[
				"MaxPe",
				"MaxPacketsPerIteration"
			],
			[
				"numPackets",
				"numPacketsRead"
			],
			[
				"max",
				"maxPacketsToRead"
			],
			[
				"MaxPackets",
				"MaxPacketsPerIteration"
			],
			[
				"numPAckets",
				"numPacketsWritten"
			],
			[
				"previous",
				"previous"
			],
			[
				"prve",
				"previous"
			],
			[
				"nu",
				"previousChunkNumSlices"
			],
			[
				"force",
				"forceAckPreviousChunk"
			],
			[
				"Packet",
				"PacketBufferEntry"
			],
			[
				"Max",
				"MaxFragmentSize"
			],
			[
				"SERIALIZE_",
				"PROTOCOL2_SERIALIZE_OBJECT"
			],
			[
				"rec",
				"receivedFragments"
			],
			[
				"MaxFrag",
				"MaxFragmentsPerPacket"
			],
			[
				"total",
				"total_fragments"
			],
			[
				"sequence",
				"sequence_difference"
			],
			[
				"MAX",
				"MaxFragmentSize"
			],
			[
				"PROTOCOL2_ERR",
				"PROTOCOL2_STREAM_ERROR_NONE"
			],
			[
				"TEST_PACKET",
				"TEST_PACKET_NUM_TYPES"
			],
			[
				"SYNC_MODE_",
				"SYNC_MODE_ADAPTIVE_SMOOTHING"
			],
			[
				"SYNC_MODE_QU",
				"SYNC_MODE_QUANTIZE_ON_BOTH_SIDES"
			],
			[
				"SYNC",
				"SYNC_MODE_UNCOMPRESSED"
			],
			[
				"min",
				"min_ticks_ahead"
			],
			[
				"old_st",
				"oldest_input_in_packet"
			],
			[
				"ready_to_",
				"ready_to_apply_adjustment_offset"
			],
			[
				"time_",
				"time_last_dropped_input"
			],
			[
				"server_cet",
				"server_get_client_input"
			],
			[
				"Input",
				"InputSlidingWindowSize"
			],
			[
				"ready",
				"ready_to_apply_sync"
			],
			[
				"client_",
				"client_sync_data"
			],
			[
				"tim",
				"time_last_packet_received"
			],
			[
				"PACKET",
				"PACKET_TYPE_CONNECTION_REQUEST"
			],
			[
				"PACKET_TYPE",
				"PACKET_TYPE_INPUT"
			],
			[
				"PACKET_TYPE_",
				"PACKET_TYPE_CONNECTION_DENIED"
			],
			[
				"PACK",
				"PACKET_TYPE_CONNECTION_REQUEST"
			],
			[
				"COMP",
				"COMPRESSION_MODE_ORIENTATION"
			],
			[
				"COM",
				"COMPRESSION_MODE_NO_VELOCITY"
			],
			[
				"position",
				"position_error_dist_squared"
			],
			[
				"pos",
				"position_error"
			],
			[
				"STATE",
				"STATEFUL_MODE_INPUT_AND_STATE"
			],
			[
				"Priority",
				"CubePriorityInfo"
			],
			[
				"Quant",
				"QuantizedPositionBoundXY"
			],
			[
				"Position",
				"QuantizedPositionBoundXY"
			],
			[
				"Quantiz",
				"QuantizedSnapshotWithVelocity"
			],
			[
				"Qua",
				"QuantizedCubeState"
			],
			[
				"linera_",
				"linear_velocity_y"
			],
			[
				"DELTA_MODE",
				"DELTA_MODE_RELATIVE_INDEX"
			],
			[
				"COMPRESSION_MODE",
				"COMPRESSION_MODE_POSITION"
			],
			[
				"abso",
				"absolute_position_bits"
			],
			[
				"absol",
				"absolute_quaternion_bits"
			],
			[
				"ab",
				"absolute_quaternion_bits"
			],
			[
				"Rel",
				"RelativeQuaternionLargeW"
			],
			[
				"quater",
				"quaternion_negative_w"
			],
			[
				"COMPRESSION",
				"COMPRESSION_MODE_QUANTIZE_POSITION"
			],
			[
				"QuantizedPosition",
				"QuantizedPositionBoundXY"
			],
			[
				"snap",
				"snapshot_sequence_buffer"
			],
			[
				"CONTEXT_SNAP",
				"CONTEXT_SNAPSHOT_SLIDING_WINDOW"
			],
			[
				"ntework",
				"network_simulator"
			],
			[
				"snapshot",
				"snapshot_sliding_window"
			],
			[
				"m_ba",
				"m_bandwidthExclude"
			],
			[
				"received",
				"received_snapshot_this_frame"
			],
			[
				"COMPRES",
				"COMPRESSION_MODE_UNCOMPRESSED"
			],
			[
				"INT",
				"SNAPSHOT_INTERPOLATION_HERMITE"
			],
			[
				"SNAPSHOT_MODE_",
				"SNAPSHOT_MODE_LINEAR_INTERPOLATION_10PPS"
			],
			[
				"SNAPSHOT_MODE",
				"SNAPSHOT_MODE_NAIVE_60PPS_JITTER"
			],
			[
				"interpo",
				"interpolation_start_time"
			],
			[
				"inter",
				"interpolation_start_time"
			],
			[
				"SNAPSHOT_IN",
				"SNAPSHOT_INTERPOLATION_HERMITE"
			],
			[
				"SNAPSHOT",
				"SNAPSHOT_INTERPOLATION_LINEAR"
			],
			[
				"LOCK",
				"LOCKSTEP_MODE_DETERMINISTIC"
			],
			[
				"mode",
				"snapshot_mode_data"
			],
			[
				"STONE",
				"STONE_MODE_HDR_TEST"
			],
			[
				"vec",
				"vectorial"
			],
			[
				"new",
				"network_simulator"
			],
			[
				"playout",
				"playout_delay_buffer"
			],
			[
				"LOK",
				"LOCKSTEP_PACKET_INPUTS"
			],
			[
				"in",
				"input_sliding_window"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					""
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					""
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/C++11 (Server).sublime-build",
					""
				],
				[
					"Packages/User/C++11 (Server).sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C++11 (Server).sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 87.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"TODO",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"syntax mark",
				"Set Syntax: Markdown"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package install",
				"Package Control: Install Package"
			],
			[
				"Packinst",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Commit history"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"Pack",
				"Package Control: Disable Package"
			],
			[
				"Package",
				"Preferences: Browse Packages"
			],
			[
				"Clang",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Sub",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"Install",
				"Package Control: Install Package"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 416.0,
		"history":
		[
			"print 'hello'",
			"print \"hello\"",
			"ls",
			"ls -al",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/gaffer/git/libyojimbo"
	],
	"file_history":
	[
		"/Users/gaffer/docker/commands.txt",
		"/Users/gaffer/git/libyojimbo/TODO",
		"/Users/gaffer/git/libyojimbo/test.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_simulator.cpp",
		"/Users/gaffer/git/libyojimbo/docker/Dockerfile",
		"/Users/gaffer/git/libyojimbo-fucked/premake5.lua",
		"/Users/gaffer/git/libyojimbo/client.cpp",
		"/Users/gaffer/git/libyojimbo/premake5.lua",
		"/Users/gaffer/docker/Dockerfile",
		"/Users/gaffer/libsodium-1.0.10/README.markdown",
		"/Users/gaffer/git/libyojimbo/yojimbo_network.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_network.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_client_server.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_interface.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_sockets.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_simulator.h",
		"/Users/gaffer/git/libyojimbo/yojimbo.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_interface.cpp",
		"/Users/gaffer/git/libyojimbo/CHANGES",
		"/Users/gaffer/docker/DockerFile",
		"/Users/gaffer/git/libyojimbo/yojimbo_simulator_interface.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_base_interface.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_simulator_interface.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_platform.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_simulator.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_sockets.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_config.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_address.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_address.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_client_server.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_base_interface.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_interface.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_socket_interface.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_socket_interface.h",
		"/Users/gaffer/patreon/github.txt",
		"/Users/gaffer/git/libyojimbo/yojimbo_serialize.h",
		"/Users/gaffer/source code/passwords.txt",
		"/Users/gaffer/git/libyojimbo/README.md",
		"/Users/gaffer/git/libyojimbo/BUILDING",
		"/Users/gaffer/git/libyojimbo/client_server.cpp",
		"/Users/gaffer/git/libyojimbo/network_info.cpp",
		"/Users/gaffer/git/libyojimbo/server.cpp",
		"/Users/gaffer/git/libyojimbo/shared.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_allocator.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_bitpack.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_common.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_common.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_encryption.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_encryption.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_simulator.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet_processor.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet_processor.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_platform.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_queue.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_stream.h",
		"/Users/gaffer/git/libyojimbo/sodium.h",
		"/Users/gaffer/git/protocol2/yojimbo.h",
		"/Users/gaffer/git/protocol2/yojimbo_config.h",
		"/Users/gaffer/git/libyojimbo/PLANNING",
		"/Users/gaffer/git/libyojimbo/WOULD BE NICE",
		"/Users/gaffer/git/libyojimbo/sodium/crypto_sign_edwards25519sha512batch.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_memory.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_types.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_array.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_hash.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_memory.h",
		"/Users/gaffer/git/libyojimbo/BULLSHIT 3",
		"/Users/gaffer/git/libyojimbo/BULLSHIT 4",
		"/Users/gaffer/git/libyojimbo/BULLSHIT",
		"/Users/gaffer/git/libyojimbo/BULLSHIT 2",
		"/Users/gaffer/git/libyojimbo/**** client reconnect ****",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_implementation.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_implementation.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_common_interface.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_network_interface_common.h",
		"/Users/gaffer/git/libyojimbo/untitled",
		"/Users/gaffer/git/cubes/server.cpp",
		"/Users/gaffer/git/libyojimbo/untitled.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_encryption_mapping.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_crypto.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_crypto.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_encryption_manager.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_protocol.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_protocol.h",
		"/Users/gaffer/git/libyojimbo/sodium/crypto_aead_chacha20poly1305.h",
		"/Users/gaffer/git/libyojimbo/network2.h",
		"/Users/gaffer/git/libyojimbo/protocol2.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_util.h",
		"/Users/gaffer/git/protocol2/premake5.lua",
		"/Users/gaffer/git/protocol2/yojimbo_socket_interface.h",
		"/Users/gaffer/git/protocol2/yojimbo_socket_interface.cpp",
		"/Users/gaffer/git/protocol2/007_packet_encryption.cpp",
		"/Users/gaffer/git/protocol2/TODO",
		"/Users/gaffer/git/protocol2/yojimbo_packet_processor.h",
		"/Users/gaffer/git/protocol2/yojimbo_packet_processor.cpp",
		"/Users/gaffer/git/protocol2/CHANGES",
		"/Users/gaffer/git/protocol2/yojimbo_network_interface.h",
		"/Users/gaffer/git/protocol2/yojimbo_crypto.h",
		"/Users/gaffer/git/protocol2/yojimbo_crypto.cpp",
		"/Users/gaffer/git/protocol2/network2.h",
		"/Users/gaffer/git/protocol2/protocol2.h",
		"/Users/gaffer/git/protocol2/test.cpp",
		"/Users/gaffer/git/protocol2/008_securing_dedicated_servers.cpp",
		"/Users/gaffer/git/protocol2/006_client_server.cpp",
		"/Users/gaffer/git/protocol2/yojimbo.cpp",
		"/Users/gaffer/git/protocol2/001_reading_and_writing_packets.cpp",
		"/Users/gaffer/git/protocol2/002_serialization_strategies.cpp",
		"/Users/gaffer/git/protocol2/003_packet_fragmentation_and_reassembly.cpp",
		"/Users/gaffer/git/protocol2/004_sending_large_blocks_of_data.cpp",
		"/Users/gaffer/Desktop/CONTRACT GOALS",
		"/Users/gaffer/git/protocol2/temp.cpp",
		"/Users/gaffer/git/protocol2/yojimbo_types.h",
		"/Users/gaffer/git/protocol2/yojimbo_array.h",
		"/Users/gaffer/git/protocol2/yojimbo_queue.h",
		"/Users/gaffer/git/protocol2/yojimbo_hash.h",
		"/Users/gaffer/git/protocol2/yojimbo_memory.h",
		"/Users/gaffer/git/protocol2/yojimbo_allocator.h",
		"/Users/gaffer/git/protocol/src/Protocol/MessageFactory.h",
		"/Users/gaffer/git/protocol/src/Network/BSDSocket.cpp",
		"/Users/gaffer/git/protocol/src/Network/BSDSocket.h",
		"/Users/gaffer/git/protocol/src/Protocol/ProtocolEnums.h",
		"/Users/gaffer/git/protocol/src/Network/Enums.h",
		"/Users/gaffer/git/protocol2/vectorial/simd4f_neon.h",
		"/Users/gaffer/git/protocol2/vectorial/vec3f.h",
		"/Users/gaffer/git/protocol2/yojimbo_memory.cpp"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"-CHANGES,-TODO,-WOULDBENICE",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"",
			"-CHANGES,-TODO",
			"-CHANGES,TODO",
			"-CHANGES",
			"-CHANGES -TODO",
			"",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"sam/*.h;sam/*.cpp",
			"sam/*.h,sam/*.cpp",
			"sam/*.h sam/*.cpp",
			"*.h *.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"*.h",
			"*.cpp",
			"*.cpp *.h",
			"*.cpp; *.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"\"server\"",
			"YOJIMBO_PLATFORM_MACOS",
			"YOJIMBO_PLATFORM_MAC",
			"YOJIMBO_PLATFORM_MACOSX",
			"network2 ",
			"// todo",
			"Add",
			"zip",
			"new ",
			"new",
			"// todo",
			"PACKET_AGGREGATION",
			"// todo",
			"new",
			"// todo",
			"Free",
			"// todo",
			"malloc(",
			"alloca(",
			"// todo",
			"server_is_full",
			"// todo",
			"delete",
			"// todo",
			"class PacketFactory",
			"// todo",
			"new ",
			"delete []",
			"new ",
			"malloc",
			"new",
			"fill",
			"ShutdownNetwork",
			"InitializeNetwork",
			"Allocator",
			"MallocAllocator",
			"IsEmpty",
			"Pop()",
			"assert( entry.packet",
			"sendQueueSize",
			"/*",
			"yojimbo_array.h",
			"yojimbo_types.h",
			"ScratchAllocator",
			"Allocator &",
			"0.1f",
			"is full",
			"SERVER_IS_FULL",
			"_FULL",
			"client_side",
			"NumIter",
			"printf",
			"FindConnectTokenEntry",
			"ConnectTokenEntry",
			"PrintBytes",
			"mac",
			"PrintBytes",
			"_reconnect",
			"FindOrAdd",
			"FindOrAddConnectTokenEntry",
			"sendKey",
			"RequestMatch",
			"RemoveEncryptionMapping",
			"_reconnect",
			"FindAddressAndClientId",
			"RemoveEncrypt",
			"Disconnect",
			"NetworkSimulator",
			"networkSimulator",
			"OnPacketSent",
			"m_latency",
			"GameServer",
			"& address",
			"m_socket",
			"GlobalUnicast",
			"INVALID",
			"HeartBeatPacket",
			"::Process",
			"HeartBeatPacket",
			"HeartBeat",
			"m_clientIndex = ",
			"::GetTime",
			"= -1",
			"HeartBeat",
			"printf( ",
			"print",
			"m_allPacketTypes",
			"ReadBytes",
			"SerializeBytes",
			"memset",
			"m_allPacketTypes",
			"memset",
			"type",
			"htons",
			"IsLinkLocal",
			"IPV6",
			"m_address_ipv6",
			"m_serverAddress",
			"SOCKETS",
			"printf",
			"sockaddr_in",
			"htons(",
			"GetClientStat",
			"Check",
			"-> %s",
			"printf",
			"GetFlags",
			"Insecure",
			"CLIENT_STATE_SENDING_INSECURE_CONNECT",
			"CHALLENGE_RESPONSE",
			"CHALLENGE",
			"::ProcessConnectionHeartBeat",
			", true )",
			"NumDisc",
			", true )",
			"ConnectClient",
			"DENIED",
			"Heart",
			"Heartbeat",
			"m_clientId",
			", time",
			"SendPacketToServer",
			"ProcessIns",
			"InsecureConnect",
			"Reset",
			"m_clientId",
			"::Connect",
			"m_clientSalt"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"SequenceBuffer",
			"sequence_buffer",
			"SequenceBuffer",
			"sliding_window",
			"network_buffer.",
			"NetworkBuffer<",
			"ring_buffer",
			"CORE_ASSERT",
			"CORE_ASSERT_CLOSE",
			"CORE_ASSERT",
			"CORE_CHECK",
			"CORE_ARRAY_NEW",
			"CORE_NEW_ARRAY",
			"CORE_DELETE_ARRAY",
			"CORE_DELETE",
			"CORE_NEW",
			"CORE_ASSERT",
			"Simulator::",
			"memory_globals.",
			"global.",
			"PROTOCOL_CHECK(",
			"PROTOCOL_ASSERT(",
			"assert",
			"bitpacker",
			"    ",
			"namespace sam",
			"namespace sam {",
			"America 2008-2012",
			"netProtocolOld.h"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 524.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "yojimbo.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/docker/commands.txt"
			],
			[
				"docker",
				"docker/Dockerfile"
			],
			[
				"premake5.lua",
				"premake5.lua"
			],
			[
				"test.cpp",
				"test.cpp"
			],
			[
				"yojimbo.cpp",
				"yojimbo.cpp"
			],
			[
				"yojimbo_sim",
				"yojimbo_simulator.cpp"
			],
			[
				"todo",
				"TODO"
			],
			[
				"cient.cpp",
				"client.cpp"
			],
			[
				"client.cpp",
				"client.cpp"
			],
			[
				"premake5",
				"premake5.lua"
			],
			[
				"changes",
				"CHANGES"
			],
			[
				"interfac.h",
				"yojimbo_interface.h"
			],
			[
				"interface.h",
				"yojimbo_interface.h"
			],
			[
				"network.h",
				"yojimbo_network.h"
			],
			[
				"interface.cpp",
				"yojimbo_interface.cpp"
			],
			[
				"yojimbo.h",
				"yojimbo.h"
			],
			[
				"premake",
				"premake5.lua"
			],
			[
				"simulator_interface.cpp",
				"yojimbo_simulator_interface.cpp"
			],
			[
				"simulator_inte",
				"yojimbo_simulator_interface.h"
			],
			[
				"simulator.h",
				"yojimbo_simulator.h"
			],
			[
				"network.cpp",
				"yojimbo_network.cpp"
			],
			[
				"base_int",
				"yojimbo_base_interface.cpp"
			],
			[
				"network_int",
				"yojimbo_network_interface.h"
			],
			[
				"config.h",
				"yojimbo_config.h"
			],
			[
				"sockets.cpp",
				"yojimbo_sockets.cpp"
			],
			[
				"network_inter",
				"yojimbo_network_interface.h"
			],
			[
				"yojm",
				"yojimbo_network.cpp"
			],
			[
				"socket_int",
				"yojimbo_socket_interface.cpp"
			],
			[
				"sockets.h",
				"yojimbo_sockets.h"
			],
			[
				"socket",
				"yojimbo_socket_interface.h"
			],
			[
				"net",
				"yojimbo_network.cpp"
			],
			[
				"con",
				"yojimbo_config.h"
			],
			[
				"seria",
				"yojimbo_serialize.h"
			],
			[
				"chang",
				"CHANGES"
			],
			[
				"pre",
				"premake5.lua"
			],
			[
				"building",
				"BUILDING"
			],
			[
				"sodium",
				"sodium.h"
			],
			[
				"server",
				"server.cpp"
			],
			[
				"planning",
				"PLANNING"
			],
			[
				"would",
				"WOULD BE NICE"
			],
			[
				"simulat",
				"yojimbo_simulator_interface.cpp"
			],
			[
				"all",
				"yojimbo_allocator.h"
			],
			[
				"allocator.h",
				"yojimbo_allocator.h"
			],
			[
				"alloator.h",
				"yojimbo_allocator.h"
			],
			[
				"allo",
				"yojimbo_allocator.h"
			],
			[
				"allocator",
				"yojimbo_allocator.h"
			],
			[
				"packet",
				"yojimbo_packet.cpp"
			],
			[
				"baseinterface.h",
				"yojimbo_base_interface.h"
			],
			[
				"queue.h",
				"yojimbo_queue.h"
			],
			[
				"alloc",
				"yojimbo_allocator.h"
			],
			[
				"base",
				"yojimbo_base_interface.h"
			],
			[
				"base_",
				"yojimbo_base_interface.cpp"
			],
			[
				"bit",
				"yojimbo_bitpack.h"
			],
			[
				"types.h",
				"yojimbo_types.h"
			],
			[
				"queue",
				"yojimbo_queue.h"
			],
			[
				"simul",
				"yojimbo_network_simulator.cpp"
			],
			[
				"server.cpp",
				"server.cpp"
			],
			[
				"client_server.h",
				"yojimbo_client_server.h"
			],
			[
				"client_server.cpp",
				"yojimbo_client_server.cpp"
			],
			[
				"packet_process",
				"yojimbo_packet_processor.cpp"
			],
			[
				"encrypt",
				"yojimbo_encryption.cpp"
			],
			[
				"encr",
				"yojimbo_encryption.cpp"
			],
			[
				"encryt",
				"yojimbo_encryption.cpp"
			],
			[
				"packt",
				"yojimbo_packet_processor.cpp"
			],
			[
				"bull",
				"BULLSHIT 2"
			],
			[
				"packet_pr",
				"yojimbo_packet_processor.cpp"
			],
			[
				"cleint_server.cpp",
				"client_server.cpp"
			],
			[
				"packet_proc",
				"yojimbo_packet_processor.cpp"
			],
			[
				"base_inter",
				"yojimbo_base_interface.cpp"
			],
			[
				"simulator",
				"yojimbo_network_simulator.cpp"
			],
			[
				"shared.h",
				"shared.h"
			],
			[
				"client_server",
				"yojimbo_client_server.cpp"
			],
			[
				"network_sim",
				"yojimbo_network_simulator.h"
			],
			[
				"client_server.",
				"yojimbo_client_server.cpp"
			],
			[
				"sim",
				"yojimbo_simulator_interface.h"
			],
			[
				"network",
				"yojimbo_network_interface.h"
			],
			[
				"network_simulator.h",
				"yojimbo_network_simulator.h"
			],
			[
				"network_interface.h",
				"yojimbo_network_interface.h"
			],
			[
				"socket_inter",
				"yojimbo_socket_interface.h"
			],
			[
				"network_interfa",
				"yojimbo_network_interface.h"
			],
			[
				"socket_interface.cpp",
				"yojimbo_socket_interface.cpp"
			],
			[
				"socketinterface.cpp",
				"yojimbo_socket_interface.cpp"
			],
			[
				"serv",
				"server.cpp"
			],
			[
				"yoj",
				"yojimbo_serialize.h"
			],
			[
				"clientserver",
				"yojimbo_client_server.cpp"
			],
			[
				"socketinter",
				"yojimbo_socket_interface.cpp"
			],
			[
				"info",
				"network_info.cpp"
			],
			[
				"client",
				"yojimbo_client_server.cpp"
			],
			[
				"network_info.cpp",
				"network_info.cpp"
			],
			[
				"yojimbo_network.h",
				"yojimbo_network.h"
			],
			[
				"cliet",
				"yojimbo_client_server.cpp"
			],
			[
				"yoji",
				"yojimbo.h"
			],
			[
				"client_",
				"client_server.cpp"
			],
			[
				"cs.c",
				"client_server.cpp"
			],
			[
				"inter",
				"yojimbo_network_interface.h"
			],
			[
				"en",
				"yojimbo_encryption.h"
			],
			[
				"socke",
				"yojimbo_socket_interface.cpp"
			],
			[
				"netwo",
				"yojimbo_network.h"
			],
			[
				"packetprocessor.cpp",
				"yojimbo_packet_processor.cpp"
			],
			[
				"server.h",
				"yojimbo_client_server.h"
			],
			[
				"interface",
				"yojimbo_network_interface.h"
			],
			[
				"networ",
				"yojimbo_network.h"
			],
			[
				"packet_processor.h",
				"yojimbo_packet_processor.h"
			],
			[
				"cs.cpp",
				"client_server.cpp"
			],
			[
				"change",
				"CHANGES"
			],
			[
				"client_serve",
				"yojimbo_client_server.h"
			],
			[
				"tdo",
				"TODO"
			],
			[
				"clietn_server",
				"yojimbo_client_server.h"
			],
			[
				"clien_server.h",
				"yojimbo_client_server.h"
			],
			[
				"clien_server",
				"yojimbo_client_server.h"
			],
			[
				"yo",
				"yojimbo.cpp"
			],
			[
				"network_inet",
				"yojimbo_network_interface.h"
			],
			[
				"yojimbo_server.h",
				"yojimbo_client_server.h"
			],
			[
				"clent",
				"yojimbo_client_server.h"
			],
			[
				"encryption",
				"yojimbo_encryption.h"
			],
			[
				"enc",
				"yojimbo_encryption.h"
			],
			[
				"encryp",
				"yojimbo_encryption.h"
			],
			[
				"yojimbo_crp",
				"yojimbo_crypto.cpp"
			],
			[
				"crypto",
				"yojimbo_crypto.h"
			],
			[
				"socket_",
				"yojimbo_socket_interface.h"
			],
			[
				"t",
				"TODO"
			],
			[
				"cryp",
				"yojimbo_crypto.cpp"
			],
			[
				"socket_interface.h",
				"yojimbo_socket_interface.h"
			],
			[
				"packet_processor",
				"yojimbo_packet_processor.h"
			],
			[
				"networkinterf",
				"yojimbo_network_interface.h"
			],
			[
				"cl",
				"client_server.cpp"
			],
			[
				"common.h",
				"yojimbo_common.h"
			],
			[
				"client.cp",
				"client_server.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 404.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 276.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
