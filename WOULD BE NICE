WOULD BE NICE

    ------------------

    Definitely need more usage documentation and samples showing how to do stuff.

    It's not immediately obvious how to use libyojimbo from the samples. Or, what exactly libyojimbo does or even what it's for?

    There should definitely be some documentation from the point of view of a new user, how do you use this library? What does it do? etc.

    The existing BUILDING.md is OK, but it's doesn't guide the user at all about what is going on, and how to use the library past building a few samples.

    It would be nice to do a documentation pass over the code as well, what is the best documentation solution these days? (eg. doxygen replacement?)

    This looks interesting: http://sourcey.com/generating-beautiful-markdown-documentation-with-moxygen/

    ------------------

    There is a lot of code duplication between the default allocator and TLSF allocator for #if YOJIMBO_DEBUG_MEMORY_LEAKS

    It would be nice if this code was not duplicated. For example, it could be made part of the base allocator.

    ------------------

    Add a test for clients to connect, without messages enabled, and then send no packets for timeout * 2 seconds. 

    This verifies that the keep-alive packets work.

    ------------------

    There is no test currently that checks that a client can connect, disconnect, and reconnect and send messages successfully post-reconnection.

    This is necessary to ensure that the connection state is properly cleaned up after a client disconnect.

    Add this test!

    ------------------

    It's easy to mess up and not clear client data and break multiple server connections, or break initial connection. Ideally, create one function that gets called in both situations, so it is less easy to mess up.

    Example being, setting last packet send time, last packet receive time before initial connect, and setting it to correct values on each subsequent connect.

    ------------------

    In the common case, it should be possible to cache the encryption mapping index in the context mapping, to provide a faster lookup for encryption mapping for connected clients (eg. look up context mapping first, if found, use encryption mapping from there).

    ------------------

    Important to add tests that simulate each of the server-side client error conditions, eg. allocator, packet factory, message factory, connection, and then verify that after these errors happen, that client slot is cleared and a client can connect to it again, otherwise, possibility that I have error codes not getting cleared by accident on client disconnect.

    ------------------

    Implement QoS within the connection, eg. packet loss, latency measurements etc, and make this available to the user to query.

    ------------------

    Add functionality to connection and client/server to get the set of packet acks, so users can get acks and build their own systems on top of that.

    ------------------

    Optimize the simulator to keep track of head and tail internally, so it can avoid scanning the entire 4096 entries on each receive call.

    ------------------

    Really need to make the matcher HTTPS request asynchronous, can't have it blocking the main thread like it does now!

    ------------------

    Need to get coverity setup to run with a travis job. Right now, it needs to be run manually, by somebody.

    It should be setup to run automatically on each commit to "coverity" branch, then I can create a premake action to determine current branch, mainline or development, and integrate across current head to that branch.

    eg. pm coverity

    ------------------

    The connection and channels code seems a bit rough. Should consider a second pass, to see if I can make it simpler. It's the code is hard to understand. Even for me, and I wrote it =p

    ------------------

    Clean up profile.cpp with helper methods. It's overly complicated for what it does!

    ------------------
