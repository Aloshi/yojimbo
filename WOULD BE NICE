WOULD BE NICE

    ------------------

    It's possible to send a message that is too large to be transmitted in the reliable-ordered channel.

    This currently stalls out the channel and presents no error to the user.

    Instead of this, it would be good to detect this error and disconnect the client.

    This should be done on both server and client. eg. a new channel error type that feeds into connection error.

    ------------------

    Definitely need more usage documentation and samples showing how to do stuff.

    It's not immediately obvious how to use libyojimbo from the samples. Or, what exactly libyojimbo does or even what it's for?

    There should definitely be some documentation from the point of view of a new user, how do you use this library? What does it do? etc.

    ------------------

    Would be nice if each packet factory or message factory had an easy to access hash (uint64_t) that could be use to quickly test if two factories are compatible.

    This hash could also input into a protocol id hash now that it's 64 bit as well.

    ------------------

    Add a unit test for user context to make sure it's working end-to-end.

    ------------------

    Add tests that simulate each of the server-side client error conditions, eg. allocator, packet factory, message factory, connection, and then verify that after these errors happen, that client slot is cleared and a client can connect to it again, otherwise, possibility that I have error codes not getting cleared by accident on client disconnect.

    ------------------

    Add functionality to connection and client/server to get the set of packet acks, so users can get acks and build their own systems on top of that.

    ------------------

    Really need to make the matcher HTTPS request asynchronous, can't have it blocking the main thread like it does now!

    ------------------
