WOULD BE NICE

    ------------------

    Definitely need more usage documentation and samples showing how to do stuff.

    It's not immediately obvious how to use libyojimbo from the samples. Or, what exactly libyojimbo does or even what it's for?

    There should definitely be some documentation from the point of view of a new user, how do you use this library? What does it do? etc.

    The existing BUILDING.md is OK, but it's doesn't guide the user at all about what is going on, and how to use the library past building a few samples.

    It would be nice to do a documentation pass over the code as well, what is the best documentation solution these days? (eg. doxygen replacement?)

    Some good documentation examples: 

    http://sourcey.com/generating-beautiful-markdown-documentation-with-moxygen/

    http://google.github.io/flatbuffers/

    http://www.glfw.org

    ------------------

    Add tests that simulate each of the server-side client error conditions, eg. allocator, packet factory, message factory, connection, and then verify that after these errors happen, that client slot is cleared and a client can connect to it again, otherwise, possibility that I have error codes not getting cleared by accident on client disconnect.

    ------------------

    Add functionality to connection and client/server to get the set of packet acks, so users can get acks and build their own systems on top of that.

    ------------------

    Optimize the simulator to keep track of head and tail internally, so it can avoid scanning the entire 4096 entries on each receive call.

    ------------------

    Really need to make the matcher HTTPS request asynchronous, can't have it blocking the main thread like it does now!

    ------------------

    Need to get coverity setup to run with a travis job. Right now, it needs to be run manually, by somebody.

    It should be setup to run automatically on each commit to "coverity" branch, then I can create a premake action to determine current branch, mainline or development, and integrate across current head to that branch.

    eg. pm coverity

    ------------------

    Implement QoS within the connection, eg. packet loss, latency measurements etc, and make this available to the user to query.

    ------------------

    The connection and channels code seems a bit rough. Should consider a second pass, to see if I can make it simpler. It's the code is hard to understand. Even for me, and I wrote it =p

    ------------------

    Clean up profile.cpp with helper methods. It's overly complicated for what it does!

    ------------------
