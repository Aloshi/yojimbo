WOULD BE NICE

    ------------------

    Network simulator is pretty slow.

    It would be much faster to do one linear scan to determine the set of packets to dequeue inside the update pump, and then just pop those off.

    ------------------

    Add a unit test for user context

    ------------------

    Add a test to verify that server start/stop/start with a different number of clients works correctly.

    I just had a memory leak in this situation that went undetected because no test does this. This should always get picked up.

    ------------------

    Add a YOJIMBO_ALLOCATOR( CustomAllocatorClass ) macro, so you can easily override inside client/server.

    Users of the library are going to want the ability to do this easily. Not everybody will want to use TLSF (even though it's great).

    ------------------
    
    Add a test case for both unordered and ordered messages to show that it properly handles a message failing to serialize, 

    eg. properly cleans up, sets error state, shuts down the connection.

    Previously, a bug snuck through where messages were not getting cleaned up properly and the server would crash in this situation.

    Adding these tests will make sure this never happens again.

    ------------------

    Add a unit test that intentionally exhausts the client allocator.

    Make sure the server detects this and disconnects that client.

    Make sure client can reconnect to the slot that was exhausted (eg. it is properly cleared).

    ------------------

    Implement "replay" protection. 

    Create a sliding window of last 1024 packets per-encryption mapping.

    If any packet comes in in the last 1024, check if it has already been received, if so, ignore it (don't decrypt). 

    If any packet comes in with sequence # older than the sliding window, discard it.

    Otherwise, process the packet normally.

    ------------------

    You should be able to put a network simulator in front of a real BSD socket transport.

    This would allow users to simulate bad network conditions on top of a real socket over LAN.

    =================================================================

    ------------------

    Default allocator should store block size in 4 bytes preceding the allocated block

    This way the default allocator can report on # of bytes allocated.

    Right now it cannot.

    ------------------
    
    Add a test for a very large message send queue (and large # of messages per-packet) with a tiny message receive queue.
    
    This would make sure we never send messages that the reciever can't buffer. Right now it's possible for all the unit tests 
    to pass, even if the code under stress will send messages that the reciever can't buffer.

    ------------------

    Would really like a nice way in debug builds to warn the user about stuff, eg. better than an assert, an assert with a message.

    For example, a lot of asserts seem really low level, but they just mean, OK, you added your own packet types, but forgot to override the callback "CreatePacketFactory".

    The last thing I want is a user experiencing a bunch of really obscure low-level asserts when they are just trying to use the library.

    So there should be this idea of checks which print out a nice error message, hey, you didn't do a thing.

    Ideally, when working with a client integrating this library, find whatever pain points they experience on first integration, and then add checks to guard against these and save time for the next client.
    
    ------------------

    Definitely need more usage documentation and samples showing how to do stuff.

    I don't know that it's immediately obvious how to use libyojimbo from the samples. Or, what exactly libyojimbo does or what it's for?

    Also, better documentation could be added explaining what yojimbo is for (dedicated servers), and how its protocol works.

    Perhaps a bunch of posts to gafferongames.com would be a good idea to start?

    ------------------

    Really need to make the matcher HTTPS request asynchronous, can't have it blocking the main thread like it does now!

    ------------------

    Would be nice if a secure client connect accepted a list of servers to try to connect to, instead of having the user need to do that iteration manually outside of the client class. This is how it is meant to be used, after all.

    ^---- Do this later when the matchmaker actually returns multiple results.

    ------------------

    Need to get coverity setup to run with a travis job. Right now, it needs to be run manually, by somebody.

    It should be setup to run automatically on each commit to "coverity" branch, then I can create a premake action to determine current branch, mainline or development, and integrate across current head to that branch.

    eg. pm coverity

    ------------------

    I don't like the current context idea. It would be good for the stream to have a concept of client/server context, and separate "User Context" concept that can be just passed in. I don't like the idea of the user having to derive from my client/server context just to pass in their own context.

    stream.GetUserContext() is the ideal here.

    ------------------

    It would be great to have stats inside the packet factory for the number of packets created of each type (uint64_t)

    ------------------

    Counters per-packet type in the packet processor, along with stats for the size of each packet serialized would be useful.

    ------------------

    Similarly, per-message type counters inside the connection would be great to help track down large messages (eg. min/max/average per-message type)

    ------------------
