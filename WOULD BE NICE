WOULD BE NICE

    ------------------

    I notice that the allocators aren't checked on the server when a client finishes up.

    It seems that although I have silo'd clients into their own allocator, I don't think I've done enough work (yet) to ensure that a malicious client can't shit up an allocator after it quits.

    I really should add some code to check that all allocations are cleaned up after the server cleans up an allocator slot.

    This might require adding some code to the transport to invalidate packets in queues that belong to a particular allocator.

    This seems a bit weird, but I think, I'm not really comfortable with the allocator setup until I can assert that a client has properly cleaned up all allocations made by its client slot allocator when the server resets that slot.

    Same logic applies to message factories. Make sure all messages are cleaned up. This is an important security measure, to make sure the server isn't leaking memory from one client session to the next.

    ------------------

    Definitely need more usage documentation and samples showing how to do stuff.

    It's not immediately obvious how to use libyojimbo from the samples. Or, what exactly libyojimbo does or even what it's for?

    There should definitely be some documentation from the point of view of a new user, how do you use this library? What does it do? etc.

    The existing BUILDING.md is OK, but it's doesn't guide the user at all about what is going on, and how to use the library past building a few samples.

    It would be nice to do a documentation pass over the code as well, what is the best documentation solution these days? (eg. doxygen replacement?)

    Some good documentation examples: 

    http://sourcey.com/generating-beautiful-markdown-documentation-with-moxygen/

    http://google.github.io/flatbuffers/

    http://www.glfw.org

    ------------------

    Probably a good safety measure to verify that a message sent across a channel belongs to the message factory set on the channel. It's an easy mistake to make, and would be hard to track down otherwise.

    ------------------
    
    Would be nice if packet factories named each packet type as it is registered, so this could be used in debugging.

    Same logic could apply to message factories as well.

    ------------------

    Would be nice if each packet factory or message factory had an easy to access hash (uint64_t) that could be use to quickly test if two factories are compatible.

    This hash also input into a protocol id hash now that it's 64 bit as well.

    ------------------

    Probably a good idea on client connect/disconnect, and server per-client connect client, disconnect client that all messages in the message factory are cleaned up, all allocations are freed, packets are destroyed, and so on.

    ------------------

    Add a unit test for user context to make sure it's working end-to-end.

    ------------------

    Add tests that simulate each of the server-side client error conditions, eg. allocator, packet factory, message factory, connection, and then verify that after these errors happen, that client slot is cleared and a client can connect to it again, otherwise, possibility that I have error codes not getting cleared by accident on client disconnect.

    ------------------

    Add functionality to connection and client/server to get the set of packet acks, so users can get acks and build their own systems on top of that.

    The current system based around callbacks is unweildy.

    ------------------

    Optimize the simulator to keep track of head and tail internally, so it can avoid scanning the entire 4096 entries on each receive call.

    ------------------

    Really need to make the matcher HTTPS request asynchronous, can't have it blocking the main thread like it does now!

    ------------------

    Need to get coverity setup to run with a travis job. Right now, it needs to be run manually, by somebody.

    It should be setup to run automatically on each commit to "coverity" branch, then I can create a premake action to determine current branch, mainline or development, and integrate across current head to that branch.

    eg. pm coverity

    ------------------

    Implement QoS within the connection, eg. packet loss, latency measurements etc, and make this available to the user to query.

    ------------------

    Clean up profile.cpp with helper methods. It's overly complicated for what it does!

    ------------------

    While documenting the client/server, the observation is pretty clear that it's two concepts mashed into one:

    The first concept is all the implementation details of the actual connection negotiation protocol.

    The second concept is that after the connection has been established, the ability to send and receive packets and messages between server and client.

    The first concept would actively get in the way of any attempt to port to existing console APIs like X1 or PS4.

    The second conceopt is quite general, and could live on top of any "session" implementation.

    Could these concepts be split apart? Would this make porting to other platforms easier?

    (Attempting such a port at the transport level would be, IMO, foolish...)

    ------------------
    