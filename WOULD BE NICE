WOULD BE NICE

    ------------------

    Client should be smart enough to know the expiry time on a connect token.

    If the connect doesn't complete within the expiry time, give up.

    Right now, it risks, worst case, hitting n servers, with timeout per-server, which if n is high could be worst case a lot higher than expiry time.

    ------------------

    Packet processor max packet size is deceptive. You give it a max packet size, it adds encryption overhead to it.

    It should be the other way around. Specify the maximum packet size you want to generate (total). Calculate how much packet payload data can be allowed while still hitting that maximum, vs. padding it out.

    I think this is more honest, and it is what the user of this system would be expecting. It would also simplify the interface for the packet processor.

    ------------------

    I notice that the allocators aren't checked on the server when a client is disconnected.

    It seems that although I have silo'd clients into their own allocator, I don't think I've done enough work (yet) to ensure that a malicious client can't shit up an allocator after it quits.

    I really should add some code to check that all allocations are cleaned up after the server cleans up an allocator slot.

    This might require adding some code to the transport to invalidate packets in queues that belong to a particular allocator.

    This seems a bit weird, but I think, I'm not really comfortable with the allocator setup until I can assert that a client has properly cleaned up all allocations made by its client slot allocator when the server resets that slot.

    Same logic applies to message factories. Make sure all messages are cleaned up. This is an important security measure, to make sure the server isn't leaking memory from one client session to the next.

    ------------------

    Client should also do the same checks on the allocator between each connect/disconnect.

    This is less important on the client than the server, because it would only bring down the one client, but there should still be no memory leaks as the client connects and disconnects.

    ------------------

    Definitely need more usage documentation and samples showing how to do stuff.

    It's not immediately obvious how to use libyojimbo from the samples. Or, what exactly libyojimbo does or even what it's for?

    There should definitely be some documentation from the point of view of a new user, how do you use this library? What does it do? etc.

    ------------------

    Probably a good safety measure to verify that a message sent across a channel belongs to the message factory set on the channel. 

    It's an easy mistake to make, and would be hard to track down otherwise.

    ------------------
    
    Would be nice if packet factories named each packet type as it is registered, so this could be used in debugging.

    Same logic could apply to message factories as well.

    ------------------

    Would be nice if each packet factory or message factory had an easy to access hash (uint64_t) that could be use to quickly test if two factories are compatible.

    This hash also input into a protocol id hash now that it's 64 bit as well.

    ------------------

    Add a unit test for user context to make sure it's working end-to-end.

    ------------------

    Add tests that simulate each of the server-side client error conditions, eg. allocator, packet factory, message factory, connection, and then verify that after these errors happen, that client slot is cleared and a client can connect to it again, otherwise, possibility that I have error codes not getting cleared by accident on client disconnect.

    ------------------

    Add functionality to connection and client/server to get the set of packet acks, so users can get acks and build their own systems on top of that.

    The current system based around callbacks is unweildy.

    ------------------

    Optimize the simulator to keep track of head and tail internally, so it can avoid scanning the entire 4096 entries on each receive call.

    ------------------

    Really need to make the matcher HTTPS request asynchronous, can't have it blocking the main thread like it does now!

    ------------------

    Implement QoS within the connection, eg. packet loss, latency measurements etc, and make this available to the user to query.

    ------------------

    Clean up profile.cpp with helper methods. It's overly complicated for what it does!

    ------------------
